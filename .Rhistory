data %>% rename(insertion = `->ACGT`, deletion = `ACGT>-`)
data %>%
rename(insertion = `->ACGT`, deletion = `ACGT>-`) %>%
pivot_longer(contains(c(">", "insertion", "deletion")), names_to = "type", values_to = "frequency")
data <- data %>%
rename(insertion = `->ACGT`, deletion = `ACGT>-`) %>%
pivot_longer(contains(c(">", "insertion", "deletion")), names_to = "type", values_to = "frequency")
## Colours
type_colours <- c("C>T" = "red", "G>A" = "blue", "A>C" = "grey", "A>G" = "grey", "A>T" = "grey", "C>A" = "grey", "C>G" = "grey", "G>C" = "grey", "G>T" = "grey", "T>A" = "grey", "T>C" = "grey",	"T>G" = "grey", "insertion" = "purple", "deletion" = "green")
data <- data %>%
mutate(type = factor(type, levels = names(type_colours)))
ggplot(data %>% filter(reads > 50), aes(Pos, frequency, colour = type)) +
geom_line() +
theme_bw() +
ylim(0, 0.30) +
scale_colour_manual(values = type_colours) +
facet_grid(reference ~ reads)
## Colours
type_colours <- c("C>T" = "red", "G>A" = "blue", "A>C" = "grey", "A>G" = "grey", "A>T" = "grey", "C>A" = "grey", "C>G" = "grey", "G>C" = "grey", "G>T" = "grey", "T>A" = "grey", "T>C" = "grey",	"T>G" = "grey", "insertion" = "purple", "deletion" = "green")
data <- data %>%
mutate(type = factor(type, levels = rev(names(type_colours))))
ggplot(data %>% filter(reads > 50), aes(Pos, frequency, colour = type)) +
geom_line() +
theme_bw() +
ylim(0, 0.30) +
scale_colour_manual(values = type_colours) +
facet_grid(reference ~ reads)
ggplot(data %>% filter(reads > 50), aes(Position, Frequency, colour = `Mutation Type`)) +
geom_line() +
theme_bw() +
ylim(0, 0.30) +
scale_colour_manual(values = type_colours, guide = guide_legend(reverse = TRUE)) +
facet_grid(reference ~ reads)
library(readr)
library(tidyr)
library(purrr)
library(magrittr)
library(tibble)
library(dplyr)
library(ggplot2)
library(stringr)
data <- Sys.glob("~/projects1/users/fellows/diet_calculus/analysis/min_reads_damage/*/downsampling/damageprofiles/*/*") %>%
list.files("5p_freq_misincorporations.txt", full.names = T) %>%
enframe(name = NULL, value = "file") %>%
mutate(contents = map(file, ~read_tsv(.x, comment = '#', col_types = "idddddddddddddd"))) %>%
mutate(reads = map(file, ~str_extract(.x, "rmdup-\\d*(?:reads)") %>% gsub("rmdup-|reads", "", .)) %>% unlist %>% as.integer()) %>%
mutate(reference = map(file, ~str_extract(.x, "reads/(.*)_null") %>% gsub("reads/|_null", "", .)) %>% unlist) %>%
select(reference, reads, contents) %>%
unnest(contents)
data <- data %>%
rename(insertion = `->ACGT`, deletion = `ACGT>-`, Position = Pos) %>%
pivot_longer(contains(c(">", "insertion", "deletion")), names_to = "Mutation Type", values_to = "Frequency")
## Colours
type_colours <- c("C>T" = "red", "G>A" = "blue", "A>C" = "grey", "A>G" = "grey", "A>T" = "grey", "C>A" = "grey", "C>G" = "grey", "G>C" = "grey", "G>T" = "grey", "T>A" = "grey", "T>C" = "grey",	"T>G" = "grey", "insertion" = "purple", "deletion" = "green")
data <- data %>%
mutate(type = factor(type, levels = rev(names(type_colours))))
data <- data %>%
mutate(type = factor(`Mutation Type`, levels = rev(names(type_colours))))
ggplot(data %>% filter(reads > 50), aes(Position, Frequency, colour = `Mutation Type`)) +
geom_line() +
theme_bw() +
ylim(0, 0.30) +
scale_colour_manual(values = type_colours, guide = guide_legend(reverse = TRUE)) +
facet_grid(reference ~ reads)
ggplot(data %>% filter(reads > 50), aes(Position, Frequency, colour = `Mutation Type`)) +
geom_line() +
theme_bw() +
ylim(0, 0.30) +
scale_colour_manual(values = type_colours) +
facet_grid(reference ~ reads)
type_colours
data <- data %>%
mutate(type = factor(`Mutation Type`, levels = rev(names(type_colours))))
data$`Mutation Type`
data
library(readr)
library(tidyr)
library(purrr)
library(magrittr)
library(tibble)
library(dplyr)
library(ggplot2)
library(stringr)
data <- Sys.glob("~/projects1/users/fellows/diet_calculus/analysis/min_reads_damage/*/downsampling/damageprofiles/*/*") %>%
list.files("5p_freq_misincorporations.txt", full.names = T) %>%
enframe(name = NULL, value = "file") %>%
mutate(contents = map(file, ~read_tsv(.x, comment = '#', col_types = "idddddddddddddd"))) %>%
mutate(reads = map(file, ~str_extract(.x, "rmdup-\\d*(?:reads)") %>% gsub("rmdup-|reads", "", .)) %>% unlist %>% as.integer()) %>%
mutate(reference = map(file, ~str_extract(.x, "reads/(.*)_null") %>% gsub("reads/|_null", "", .)) %>% unlist) %>%
select(reference, reads, contents) %>%
unnest(contents)
data <- data %>%
rename(insertion = `->ACGT`, deletion = `ACGT>-`, Position = Pos) %>%
pivot_longer(contains(c(">", "insertion", "deletion")), names_to = "Mutation Type", values_to = "Frequency")
## Colours
type_colours <- c("C>T" = "red", "G>A" = "blue", "A>C" = "grey", "A>G" = "grey", "A>T" = "grey", "C>A" = "grey", "C>G" = "grey", "G>C" = "grey", "G>T" = "grey", "T>A" = "grey", "T>C" = "grey",	"T>G" = "grey", "insertion" = "purple", "deletion" = "green")
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))))
ggplot(data %>% filter(reads > 50), aes(Position, Frequency, colour = `Mutation Type`)) +
geom_line() +
theme_bw() +
ylim(0, 0.30) +
scale_colour_manual(values = type_colours, guide = guide_legend(reverse = TRUE)) +
facet_grid(reference ~ reads)
"g_morhua" %>% str_split("_")
"g_morhua" %>% str_split("_") %>% pluck()
"g_morhua" %>% str_split("_") %>% pull()
"g_morhua" %>% str_split("_") %>% pluck(1)
"g_morhua" %>% str_split("_") %>% pluck(1) %>% paste0(collapse = ". ")
library(tidyverse)
library(readr)
library(readr)
library(tidyr)
library(tidyr)
library(purrr)
library(purrr)
library(magrittr)
library(tibble)
library(dplyr)
library(ggplot2)
library(stringr)
sessionInfo()
## I use tidyverse 1.3.0 to load the following packages. These will need
## to be installed in your R in the conda environment manually, as
## the conda versions didn't set up sub-depencies properly.
library(tidyverse)
## Loading
data <- Sys.glob("~/projects1/users/fellows/diet_calculus/analysis/min_reads_damage/*/downsampling/damageprofiles/*/*") %>%
list.files("5p_freq_misincorporations.txt", full.names = T) %>%
enframe(name = NULL, value = "file") %>%
mutate(contents = map(file, ~read_tsv(.x, comment = '#', col_types = "idddddddddddddd")))
## Loading
data <- Sys.glob("~/projects1/users/fellows/diet_calculus/analysis/min_reads_damage/*/downsampling/damageprofiles/*/*") %>%
list.files("5p_freq_misincorporations.txt", full.names = T) %>%
enframe(name = NULL, value = "file") %>%
mutate(contents = map(file, ~read_tsv(.x, comment = '#', col_types = "idddddddddddddd")))
data
save(data, file = "~/Downloads/Damageprofiles.robj")
library(tidyvese) #read_tsv("~/Documents/github/")
library(tidyverse) #read_tsv("~/Documents/github/")
read_tsv("~/Documents/github/aemann01/diet_calculus/damage_downscaling_damageprofiles.tsv.gz")
read_tsv("~/Documents/github/aemann01/diet_calculus/damage_downscaling_damageprofiles.tsv.gz") -> what
what %>% select(-Frequency, -`Mutation Type`) %>% group_by(reference, reads)
what %>% select(-Frequency, -`Mutation Type`, Position) %>% group_by(reference, reads) %>% distinct
what %>% select(-Frequency, -`Mutation Type`, -Position) %>% group_by(reference, reads) %>% distinct
what %>% select(-Frequency, -`Mutation Type`, -Position) %>% group_by(reference, reads) %>% distinct
what %>% select(-Frequency, -`Mutation Type`, -Position) %>% group_by(reference, reads) %>% distinct %>% group_by(reference, reads) %>% summarise(reps = n())
what %>% select(-Frequency, -`Mutation Type`, -Position) %>% group_by(reference, reads) %>% distinct %>% group_by(reference, reads) %>% summarise(reps = n()) %>% print(n = 99)
## I use tidyverse 1.3.0 to load the following packages. These will need
## to be installed in your R in the conda environment manually, as
## the conda versions didn't set up sub-depencies properly.
library(tidyverse)
## Loading
g_morhua_data <- Sys.glob("~/projects1/users/fellows/diet_calculus/analysis/min_reads_damage/g_morhua/downsampling/damageprofiles/*/*") %>%
list.files("5p_freq_misincorporations.txt", full.names = T) %>%
enframe(name = NULL, value = "file") %>%
mutate(contents = map(file, ~read_tsv(.x, comment = '#', col_types = "idddddddddddddd")))
## I use tidyverse 1.3.0 to load the following packages. These will need
## to be installed in your R in the conda environment manually, as
## the conda versions didn't set up sub-depencies properly.
library(tidyverse)
## Loading
g_morhua_data <- Sys.glob("~/projects1/users/fellows/diet_calculus/analysis/min_reads_damage/g_morhua/downsampling/damageprofiles/*/*") %>%
list.files("5p_freq_misincorporations.txt", full.names = T) %>%
enframe(name = NULL, value = "file") %>%
mutate(contents = map(file, ~read_tsv(.x, comment = '#', col_types = "idddddddddddddd")))
getwd()
setwd("~/Documents/github/aemann01/diet_calculus/")
load(file = "damageprofiler_aggregated.robj")
## Extra info extaction
data <- data %>%
mutate(reads = map(file, ~str_extract(.x, "rmdup-\\d*(?:reads)") %>% gsub("rmdup-|reads", "", .)) %>% unlist %>% as.integer(),
reference = map(file, ~str_extract(.x, "rep/(.*)_null") %>% gsub("rep/|_null", "", .)) %>% unlist,
repetition = map(file, ~str_extract(.x, "reads-\\d*(?:rep)") %>% gsub("reads-|rep", "", .) %>% unlist %>% as.integer()) %>% unlist) %>%
select(reference, reads, repetition, contents)
## Validation we load all the data we expect (100 per reference/read combination)!
data %>% select(-contents) group_by(reference, reads) %>% summarise(reps = n())
## Validation we load all the data we expect (100 per reference/read combination)!
data %>% select(-contents) %>% group_by(reference, reads) %>% summarise(reps = n())
load(file = "damageprofiler_aggregated.robj")
## Extra info extaction
data <- data %>%
mutate(reads = map(file, ~str_extract(.x, "rmdup-\\d*(?:reads)") %>% gsub("rmdup-|reads", "", .)) %>% unlist %>% as.integer(),
reference = map(file, ~str_extract(.x, "rep/(.*)_null") %>% gsub("rep/|_null", "", .)) %>% unlist,
repetition = map(file, ~str_extract(.x, "reads-\\d*(?:rep)") %>% gsub("reads-|rep", "", .) %>% unlist %>% as.integer()) %>% unlist) %>%
select(reference, reads, repetition, contents)
## Validation we load all the data we expect (100 per reference/read combination)!
data %>% select(-contents) %>% group_by(reference, reads) %>% summarise(reps = n())
## Validation we load all the data we expect (100 per reference/read combination)!
data %>% select(-contents) %>% group_by(reference, reads) %>% summarise(reps = n())
data <- data %>%
unnest(contents) %>%
rename(insertion = `->ACGT`, deletion = `ACGT>-`, Position = Pos) %>%
pivot_longer(contains(c(">", "insertion", "deletion")), names_to = "Mutation Type", values_to = "Frequency")
write_tsv(x = data, path = "damage_downscaling_damageprofiles.tsv.gz")
ggplot(data, aes(Position, Frequency, colour = `Mutation Type`, group = repetition)) +
geom_line(alpha = 0.2) +
theme_bw() +
ylim(0, 0.30) +
scale_colour_manual(values = type_colours, guide = guide_legend(reverse = TRUE)) +
facet_grid(reference ~ reads)
## Colours
type_colours <- c("C>T" = "red", "G>A" = "blue", "A>C" = "grey", "A>G" = "grey", "A>T" = "grey", "C>A" = "grey", "C>G" = "grey", "G>C" = "grey", "G>T" = "grey", "T>A" = "grey", "T>C" = "grey",	"T>G" = "grey", "insertion" = "purple", "deletion" = "green")
## Linean name formaT!
# make_linean <- function(x){
#   string <-
# }
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))))
## We will only plot C>T to stop massive over plotting, and is the main
## Mutation Type used for aDNA authetnication.
data <- data %>%
group_by(repetition) %>%
filter(`Mutation Type` == "C>T")
ggplot(data, aes(Position, Frequency, colour = `Mutation Type`, group = repetition)) +
geom_line(alpha = 0.2) +
theme_bw() +
ylim(0, 0.30) +
scale_colour_manual(values = type_colours, guide = guide_legend(reverse = TRUE)) +
facet_grid(reference ~ reads)
data
data %>% filter(reference == "t_forsythia")
data %>% filter(reference == "t_forsythia", reads == "25")
data %>% filter(reference == "t_forsythia", reads == "200")
data %>% filter(reference == "t_forsythia", reads == "200") %>% print(n = 100)
"t_forsythia" %>% str_split()
"t_forsythia" %>% str_split("/")
"t_forsythia" %>% str_split("_")
"t_forsythia" %>% str_split("_") %>% toupper()
"t_forsythia" %>% str_split("_") %>% toupper(1)
"t_forsythia" %>% str_split("_") %>% pluck(1) %>% toupper()
"t_forsythia" %>% str_split("_") %>% pluck(1)
"t_forsythia" %>% str_split("_") %>% pull(1)
"t_forsythia" %>% str_split("_") -> what
paste(toupper(what[1]), what[2])
what[1]
"t_forsythia" %>% str_split("_") %>% unlist -> what
what
paste(toupper(what[1]), what[2])
paste0(toupper(what[1]), what[2])
paste0(toupper(what[1]), what[2], collapse = " ")
paste0(toupper(what[1]), what[2], collapse = " ")
paste(toupper(what[1]), what[2], collapse = " ")
paste(toupper0(what[1]), ". ", what[2])
paste(toupper(what[1]), ". ", what[2])
paste0(toupper(what[1]), ". ", what[2])
## Linean name formaT!
make_linean <- function(x){
string <- str_split(x, "/") %>% unlist
paste0(toupper(string[1]), ". ", string[2])
}
## Linean name formaT!
make_linnean <- function(x){
string <- str_split(x, "/") %>% unlist
paste0(toupper(string[1]), ". ", string[2])
}
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))),
reference = makelinnean(reference))
## Linean name formaT!
make_linnean <- function(x){
string <- str_split(x, "/") %>% unlist
paste0(toupper(string[1]), ". ", string[2])
}
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))),
reference = makelinnean(reference))
## Linean name formaT!
make_linnean <- function(x){
string <- str_split(x, "/") %>% unlist
paste0(toupper(string[1]), ". ", string[2])
}
rm(make_linean)
make_lnnean("t_forsythia")
make_linnean("t_forsythia")
## Linean name formaT!
make_linnean <- function(x){
string <- str_split(x, "/") %>% unlist
print(string)
paste0(toupper(string[1]), ". ", string[2])
}
make_linnean <- function(x){
}
## Linean name formaT!
make_linnean <- function(x){
string <- str_split(x, "/") %>% unlist
print(string)
paste0(toupper(string[1]), ". ", string[2])
}
make_linnean("t_forsythia")
## Linean name formaT!
make_linnean <- function(x){
string <- str_split(x, "_") %>% unlist
print(string)
paste0(toupper(string[1]), ". ", string[2])
}
make_linnean("t_forsythia")
## Linean name formaT!
make_linnean <- function(x){
string <- str_split(x, "_") %>% unlist
paste0(toupper(string[1]), ". ", string[2])
}
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))),
reference = makelinnean(reference))
load(file = "damageprofiler_aggregated.robj")
## Extra info extaction
data <- data %>%
mutate(reads = map(file, ~str_extract(.x, "rmdup-\\d*(?:reads)") %>% gsub("rmdup-|reads", "", .)) %>% unlist %>% as.integer(),
reference = map(file, ~str_extract(.x, "rep/(.*)_null") %>% gsub("rep/|_null", "", .)) %>% unlist,
repetition = map(file, ~str_extract(.x, "reads-\\d*(?:rep)") %>% gsub("reads-|rep", "", .) %>% unlist %>% as.integer()) %>% unlist) %>%
select(reference, reads, repetition, contents)
## Validation we load all the data we expect (100 per reference/read combination)!
data %>% select(-contents) %>% group_by(reference, reads) %>% summarise(reps = n())
data <- data %>%
unnest(contents) %>%
rename(insertion = `->ACGT`, deletion = `ACGT>-`, Position = Pos) %>%
pivot_longer(contains(c(">", "insertion", "deletion")), names_to = "Mutation Type", values_to = "Frequency")
data <- data %>%
unnest(contents) %>%
rename(insertion = `->ACGT`, deletion = `ACGT>-`, Position = Pos) %>%
pivot_longer(contains(c(">", "insertion", "deletion")), names_to = "Mutation Type", values_to = "Frequency")
data
read_tsv("damage_downscaling_damageprofiles.tsv.gz")
## Colours
type_colours <- c("C>T" = "red", "G>A" = "blue", "A>C" = "grey", "A>G" = "grey", "A>T" = "grey", "C>A" = "grey", "C>G" = "grey", "G>C" = "grey", "G>T" = "grey", "T>A" = "grey", "T>C" = "grey",	"T>G" = "grey", "insertion" = "purple", "deletion" = "green")
## Linean name formaT!
make_linnean <- function(x){
string <- str_split(x, "_") %>% unlist
paste0(toupper(string[1]), ". ", string[2])
}
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))),
reference = makelinnean(reference))
data
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))),
reference = make_linnean(reference))
data
data %>% tail()
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))),
reference = map(reference, make_linnean) %>% unlist)
## We will only plot C>T to stop massive over plotting, and is the main
## Mutation Type used for aDNA authetnication.
data <- data %>%
group_by(repetition) %>%
filter(`Mutation Type` == "C>T")
ggplot(data, aes(Position, Frequency, colour = `Mutation Type`, group = repetition)) +
geom_line(alpha = 0.2) +
theme_bw() +
ylim(0, 0.30) +
scale_colour_manual(values = type_colours, guide = guide_legend(reverse = TRUE)) +
facet_grid(reference ~ reads)
make_linnean("g_morhua")
data
make_linnean("t_forsythia")
read_tsv("damage_downscaling_damageprofiles.tsv.gz")
data <- read_tsv("damage_downscaling_damageprofiles.tsv.gz")
data %>% tail
## Colours
type_colours <- c("C>T" = "red", "G>A" = "blue", "A>C" = "grey", "A>G" = "grey", "A>T" = "grey", "C>A" = "grey", "C>G" = "grey", "G>C" = "grey", "G>T" = "grey", "T>A" = "grey", "T>C" = "grey",	"T>G" = "grey", "insertion" = "purple", "deletion" = "green")
## Linean name format!
make_linnean <- function(x){
string <- str_split(x, "_") %>% unlist
paste0(toupper(string[1]), ". ", string[2])
}
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))),
reference = map(reference, make_linnean) %>% unlist)
data
data %>% tail
## We will only plot C>T to stop massive over plotting, and is the main
## Mutation Type used for aDNA authetnication.
data <- data %>%
group_by(repetition) %>%
filter(`Mutation Type` == "C>T")
ggplot(data, aes(Position, Frequency, colour = `Mutation Type`, group = repetition)) +
geom_line(alpha = 0.2) +
theme_bw() +
ylim(0, 0.30) +
scale_colour_manual(values = type_colours, guide = guide_legend(reverse = TRUE)) +
facet_grid(reference ~ reads)
ggplot(data, aes(Position, Frequency, colour = `Mutation Type`, group = repetition)) +
geom_line(alpha = 0.2) +
theme_bw() +
ylim(0, 0.30) +
scale_colour_manual(values = type_colours, guide = guide_legend(reverse = TRUE)) +
facet_grid(reference ~ reads)
reference_order <- c("h_sapiens", "g_morhua", "g_vaginalis", "t_forsythia")
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))),
Reference = factor(Reference, levels = reference_order),
reference = map(reference, make_linnean) %>% unlist)
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))),
reference = factor(Reference, levels = reference_order),
reference = map(reference, make_linnean) %>% unlist)
data <- read_tsv("damage_downscaling_damageprofiles.tsv.gz")
## Colours and orders
type_colours <- c("C>T" = "red", "G>A" = "blue", "A>C" = "grey", "A>G" = "grey", "A>T" = "grey", "C>A" = "grey", "C>G" = "grey", "G>C" = "grey", "G>T" = "grey", "T>A" = "grey", "T>C" = "grey",	"T>G" = "grey", "insertion" = "purple", "deletion" = "green")
reference_order <- c("h_sapiens", "g_morhua", "g_vaginalis", "t_forsythia")
## Linean name format!
make_linnean <- function(x){
string <- str_split(x, "_") %>% unlist
paste0(toupper(string[1]), ". ", string[2])
}
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))),
reference = factor(Reference, levels = reference_order),
reference = map(reference, make_linnean) %>% unlist)
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(reference_order))),
reference = factor(Reference, levels = reference_order),
reference = map(reference, make_linnean) %>% unlist)
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))),
reference = factor(reference, levels = reference_order),
reference = map(reference, make_linnean) %>% unlist)
## We will only plot C>T to stop massive over plotting, and is the main
## Mutation Type used for aDNA authetnication.
data <- data %>%
group_by(repetition) %>%
filter(`Mutation Type` == "C>T")
ggplot(data, aes(Position, Frequency, colour = `Mutation Type`, group = repetition)) +
geom_line(alpha = 0.2) +
theme_bw() +
ylim(0, 0.30) +
scale_colour_manual(values = type_colours, guide = guide_legend(reverse = TRUE)) +
facet_grid(reference ~ reads)
data
reference_order <- c("H. sapiens", "G. morhua", "G. vaginalis", "T. forsythia")
data
## We will only plot C>T to stop massive over plotting, and is the main
## Mutation Type used for aDNA authetnication.
data <- data %>%
group_by(repetition) %>%
filter(`Mutation Type` == "C>T") %>%
mutate(reference = factor(reference, levels = reference_order))
data
ggplot(data, aes(Position, Frequency, colour = `Mutation Type`, group = repetition)) +
geom_line(alpha = 0.2) +
theme_bw() +
ylim(0, 0.30) +
scale_colour_manual(values = type_colours, guide = guide_legend(reverse = TRUE)) +
facet_grid(reference ~ reads)
reference_order <- c("H. sapiens", "G. morhua", "G. vaginalis", "T. forsythia")
## Linean name format!
make_linnean <- function(x){
string <- str_split(x, "_") %>% unlist
paste0(toupper(string[1]), ". ", string[2])
}
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))),
reference = map(reference, make_linnean) %>% unlist)
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))),
reference = map(reference, make_linnean) %>% unlist)
## We will only plot C>T to stop massive over plotting, and is the main
## Mutation Type used for aDNA authetnication.
data <- data %>%
group_by(repetition) %>%
filter(`Mutation Type` == "C>T")
ggplot(data, aes(Position, Frequency, colour = `Mutation Type`, group = repetition)) +
geom_line(alpha = 0.2) +
theme_bw() +
ylim(0, 0.30) +
scale_colour_manual(values = type_colours, guide = guide_legend(reverse = TRUE)) +
facet_grid(reference ~ reads)
data <- read_tsv("damage_downscaling_damageprofiles.tsv.gz")
## Colours and orders
type_colours <- c("C>T" = "red", "G>A" = "blue", "A>C" = "grey", "A>G" = "grey", "A>T" = "grey", "C>A" = "grey", "C>G" = "grey", "G>C" = "grey", "G>T" = "grey", "T>A" = "grey", "T>C" = "grey",	"T>G" = "grey", "insertion" = "purple", "deletion" = "green")
reference_order <- c("H. sapiens", "G. morhua", "G. vaginalis", "T. forsythia")
## Linean name format!
make_linnean <- function(x){
string <- str_split(x, "_") %>% unlist
paste0(toupper(string[1]), ". ", string[2])
}
## Clean up some stuff for pretty plotting
data <- data %>%
mutate(`Mutation Type` = factor(`Mutation Type`, levels = rev(names(type_colours))),
reference = map(reference, make_linnean) %>% unlist)
## We will only plot C>T to stop massive over plotting, and is the main
## Mutation Type used for aDNA authetnication.
data <- data %>%
group_by(repetition) %>%
filter(`Mutation Type` == "C>T")
ggplot(data, aes(Position, Frequency, colour = `Mutation Type`, group = repetition)) +
geom_line(alpha = 0.2) +
theme_bw() +
ylim(0, 0.30) +
scale_colour_manual(values = type_colours, guide = guide_legend(reverse = TRUE)) +
facet_grid(reference ~ reads)
data %>% filter(reference == "G. morhua")
data %>% filter(reference == "G. morhua", reads == 10000)
data <- read_tsv("damage_downscaling_damageprofiles.tsv.gz")
data %>% filter(reference == "g_morhua", reads == 10000)
